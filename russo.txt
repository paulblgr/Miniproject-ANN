
class RussoAgent(Agent):
    def __init__(self,  env:Env,
                # Additionnal parameters to be added here
                max_infected:int=2e4, # maximum number of infected people before confinement
                confinement_period:int= 4, # confinement period in weeks
                ):
        """
        Example agent implementation. Just picks a random action at each time step.
        """
        self.env = env
        self.time_confined = 0
        self.population_infection_limit = max_infected
        self.confinement_period = confinement_period
                
    def load_model(self, savepath):
        # This is where one would define the routine for loading a pre-trained model
        pass

    def save_model(self, savepath):
        # This is where one would define the routine for saving the weights for a trained model
        pass

    def optimize_model(self):
        # This is where one would define the optimization step of an RL algorithm
        return 0
    
    def reset(self):
        # This should be called when the environment is reset
        self.env.reset()
        self.time_confined = 0
        print("Agent reset")
    
    def act(self, obs):
        # this takes an observation and returns an action
        # the action space can be directly sampled from the env
        if (self.time_confined == 0):
            if obs[0,0,:,6].sum() > self.population_infection_limit:
                self.time_confined += 1
                print("Confinement started")
                return 1
            else:
                print("No confinement because of low infection rate")
                return 0
        if (self.time_confined >= self.confinement_period):
            self.time_confined = 0
            if obs[0,0,:,6].sum() > self.population_infection_limit:
                print("Confinement ended and confinement started again")
                self.time_confined += 1
                return 1
            else:
                print("Confinement ended and no confinement because of low infection rate")
                return 0
        return 0